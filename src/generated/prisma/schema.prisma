// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: direct connection to the database
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role            @default(USER)
  company        Company?        @relation(fields: [companyId], references: [id])
  companyId      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  questionnaires Questionnaire[]
  documents      Document[]
  activities     ActivityLog[]
  projects       Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String    @id @default(cuid())
  name      String
  address   String?
  phone     String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  invoices  Invoice[]
  projects  Project[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime      @default(now())
  endDate     DateTime?
  status      ProjectStatus @default(IN_PROGRESS)
  company     Company       @relation(fields: [companyId], references: [id])
  companyId   String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  invoices    Invoice[]
}

model Invoice {
  id        String        @id @default(cuid())
  amount    Float
  status    InvoiceStatus @default(PENDING)
  dueDate   DateTime
  company   Company       @relation(fields: [companyId], references: [id])
  companyId String
  project   Project?      @relation(fields: [projectId], references: [id])
  projectId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  payments  Payment[]
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(COMPLETED)
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  createdAt     DateTime      @default(now())
  transactionId String?
}

model Questionnaire {
  id          String   @id @default(cuid())
  title       String
  description String?
  questions   Json
  responses   Json?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String
  url       String
  size      Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  slug      String   @unique
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CHECK
  CASH
  OTHER
}
